# System Architecture

## Project Structure Overview

The United Tactical Defense system follows a clear separation of frontend and backend:

- **Frontend**: All React UI components and frontend logic are contained exclusively in the `/frontend` directory
- **Backend**: All server-side code is contained in the root `/src` directory

This separation ensures clean separation of concerns and avoids code duplication.

## Clean Architecture Overview

The backend system follows the clean architecture pattern, which consists of the following layers:

### Core Layer
- Contains domain entities and business rules
- Defines interfaces for outer layers
- Has no dependencies on other layers
- Components:
  - Entities: Domain models that represent business objects
  - Interfaces: Contracts that outer layers must implement
  - Use Cases: Business logic and operations

### Service Layer
- Contains implementation of business logic
- Depends only on the Core layer
- Implements interfaces defined in the Core layer
- Components:
  - Service implementations
  - Business logic operations
  - Orchestration of multiple operations
  - Adapters: Convert between external and internal data formats

### Data Access Layer
- Contains database and external service access
- Implements repository interfaces from Core layer
- Handles data persistence and retrieval
- Components:
  - Repository implementations
  - Data models and schemas
  - Database connections and operations

### API Layer
- Contains HTTP endpoints and controllers
- Handles request validation and response formatting
- Depends on Service layer for business logic
- Components:
  - Controllers: Handle HTTP requests
  - Middleware: Process requests and responses
  - Routes: Define API endpoints
  - Validators: Validate input data

## Directory Structure
/src                    # Root backend directory
  /core
    /entities           # Domain models
    /interfaces         # Contracts for repositories and services
    /adapters           # Interfaces for data adapters
    /usecases           # Business logic operations
  /api
    /controllers        # API endpoint controllers
    /middleware         # Request processing middleware
    /validators         # Input validation modules
    /routes             # Route definitions
  /services
    /auth               # Authentication services
    /lead               # Lead management services
    /appointment        # Appointment scheduling services
    /form               # Form processing services
      /adapters         # Form data format adapters
  /data
    /models             # Data models and schemas
    /repositories       # Data access repositories
    /migrations         # Database migration scripts
  /config               # Configuration management
  /utils                # Utility functions and helpers
  server.js             # Main server entry point
  app.js                # Express application setup

/frontend               # Root frontend directory
  /src                  # Frontend source code (React)
  /public               # Static assets
  /build                # Production build output
  package.json          # Frontend dependencies

## Testing Structure

The backend testing follows a multi-layered approach that maps to the architecture layers:

/tests                  # Root tests directory
  /api                  # API layer tests
    /controllers        # Controller tests
    /middleware         # Middleware tests
    /routes             # Route tests
    auth.test.js        # Authentication API tests
    appointment.test.js # Appointment API tests
  /services             # Service layer tests
    /auth               # Auth service tests
    /lead               # Lead service tests
    /appointment        # Appointment service tests
    formService.test.js # Form service tests
  /core                 # Core layer tests
    /entities           # Entity tests
    /usecases           # Use case tests
  /data                 # Data layer tests
    /repositories       # Repository tests
  /utils                # Utility tests
  /integration          # Integration tests across layers
    booking-flow.test.js # Booking flow integration test
  /performance          # Performance and load tests
    api-load-test.js    # API load testing
  /e2e                  # End-to-end tests
    selenium.test.js    # Browser automation tests

## Component Interactions

### Authentication Flow
1. Client sends credentials to /api/auth/login
2. AuthController validates input using validation middleware
3. AuthService authenticates user via UserRepository
4. JWT token is generated and returned to client
5. Subsequent requests use token in Authorization header
6. AuthMiddleware verifies token and attaches user to request

### Lead Management Flow
1. LeadController receives lead creation request
2. Input is validated by validation middleware
3. LeadService processes the lead creation
4. LeadRepository saves to database
5. Events are published via EventSystem

### Appointment Scheduling Flow
1. AppointmentController receives appointment request
2. Validation middleware validates input
3. AppointmentService checks availability via Repository
4. If available, appointment is created via Repository
5. Confirmation is sent back to client
6. Lead is updated with appointment information

### Form Processing Flow
1. FormController receives form submission request
2. Input is validated against form-specific validation rules
3. FormService processes the submission based on form type
4. Form is saved to database via FormRepository
5. Form can be converted to other entities (e.g., Lead)
6. Processing result is returned to client

### External Form Submission Flow
1. FormController receives external form submission
2. Form adapter converts external data to internal format
3. External data is validated using adapter-specific validation
4. FormService processes the submission using the converted data
5. If configured, data is forwarded to external systems
6. Processing result is returned to client

### Rate Limiting and Caching Flow
1. Request arrives at server and passes through global rate limiter
2. If limit is exceeded, 429 Too Many Requests response is returned
3. Request continues to endpoint-specific rate limiters
4. If endpoint has caching enabled, cache is checked for existing response
5. If cache hit, response is returned immediately
6. If cache miss, request is processed normally
7. Response is cached for future requests based on configuration
8. Rate limit headers are included in response

## Core Components

### Authentication System
- Handles user registration and login
- Implements JWT-based authentication
- Provides role-based authorization
- Manages user sessions and token refresh

### Lead Management System
- Processes and stores lead information
- Manages lead status and assignment
- Provides search and filtering capabilities
- Tracks lead activities and conversion

### Appointment System
- Handles scheduling, rescheduling, and cancellation of appointments
- Manages availability through time slot management
- Integrates with lead management system
- Provides calendar views and appointment filtering
- Sends notifications for upcoming appointments
- Ensures no conflicts or double-bookings occur

### Form Processing System
- Validates and processes form submissions
- Supports multiple form types with different validation rules
- Integrates with lead management system
- Handles data transformation and storage
- Provides submission tracking and management
- Allows form submissions to be converted to leads or appointments
- Supports external form submissions through adapters
- Can forward submissions to external systems

### Analytics Engine
- Tracks user interactions and events
- Generates reports and insights
- Identifies trends and patterns
- Provides dashboard data

### Rate Limiting System
- Protects against abuse and DoS attacks
- Configurable limits by endpoint
- Supports distributed rate limiting
- Provides rate limit information in headers
- Configurable window sizes and limits

### Caching System
- Improves response time for frequent requests
- Supports in-memory and Redis caching
- Configurable TTL by endpoint
- Includes cache headers
- Provides cache invalidation mechanisms

## Middleware Components

### Authentication Middleware
- Verifies JWT tokens in request headers
- Extracts user information from tokens
- Provides role-based authorization
- Secures protected routes

### Error Handling Middleware
- Handles all application errors
- Formats error responses in consistent format
- Provides detailed error information in development
- Logs errors for debugging and monitoring

### Request Logging Middleware
- Logs all API requests and responses
- Provides detailed timing information
- Excludes sensitive routes from logging
- Configurable verbosity based on environment

### Validation Middleware
- Validates request data against schemas
- Sanitizes input to prevent security issues
- Provides detailed validation error messages
- Supports custom validation rules for business logic

### Rate Limiting Middleware
- Limits request rates to prevent abuse
- Supports different strategies (IP, user, endpoint)
- Configurable limits and window sizes
- Works with Redis for distributed deployments
- Adds rate limit headers to responses

### Caching Middleware
- Caches API responses to improve performance
- Configurable by HTTP method, path, and status code
- Supports different TTLs for different endpoints
- Can use Redis for distributed caching
- Adds cache headers to responses

## Authentication System

### JWT Authentication Flow
1. User provides email and password to /api/auth/login
2. AuthController validates credentials via AuthService
3. AuthService authenticates user via UserRepository
4. If authentication is successful:
   - Access token is generated with short expiry (1 day default)
   - Refresh token is generated with longer expiry (7 days default)
   - Both tokens and user data are returned to client
5. Client stores tokens securely
6. Subsequent requests include access token in Authorization header
7. AuthMiddleware verifies token and attaches user to request
8. When access token expires, client uses refresh token to get a new access token
9. The `/api/auth/refresh` endpoint validates refresh token and issues new access token

### Token Security
- Access tokens have short lifetime to mitigate security risks
- Refresh tokens have longer lifetime but can only be used to generate new access tokens
- Tokens are signed with a secret key to ensure their authenticity
- Tokens contain minimal user data (id, email, role) to reduce payload size
- Token validation is performed on every protected route

### User Registration Flow
1. User submits registration data to /api/auth/register
2. AuthController validates input using validation middleware
3. AuthService checks if user already exists
4. If user doesn't exist:
   - Password is securely hashed using PBKDF2 algorithm
   - User entity is created and saved to database via UserRepository
   - Access token and refresh token are generated
   - Tokens and user data are returned to client

### User Entities and Interfaces
- User Entity: Represents user domain object with validation logic
- UserRepository: Handles data access for user operations
- AuthService: Provides authentication business logic
- AuthController: Handles HTTP requests for authentication
- AuthMiddleware: Verifies tokens and secures protected routes

## Testing Approach

### Testing Strategy
The backend follows a comprehensive testing strategy with multiple layers:

1. **Unit Tests**: Test individual functions and methods
   - Located alongside the code they test
   - Focus on isolated behavior with mocked dependencies

2. **Integration Tests**: Test interactions between components
   - Located in /tests/integration
   - Test flows that span multiple services or layers

3. **API Tests**: Verify API endpoints function correctly
   - Located in /tests/api
   - Verify request/response behavior with mocked services

4. **Performance Tests**: Assess system behavior under load
   - Located in /tests/performance
   - Measure throughput, latency, and error rates

### Test Technologies
- **Mocha**: Test runner for all backend tests
- **Chai**: Assertion library for expressive assertions
- **Sinon**: Mocking library for isolating components
- **Chai-HTTP**: HTTP testing utilities for API tests
- **Autocannon**: Load testing library for performance tests
- **Selenium WebDriver**: Browser automation for end-to-end tests

### Running Tests
- `npm test`: Run all tests
- `npm run test:api`: Run API tests only
- `npm run test:services`: Run service tests only
- `npm run test:integration`: Run integration tests only
- `npm run test:performance`: Run performance tests
- `npm run test:coverage`: Generate test coverage report
- `npm run test:runner`: Run custom test runner with summary
